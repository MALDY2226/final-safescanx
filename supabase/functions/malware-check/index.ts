import { createClient } from 'npm:@supabase/supabase-js@2.39.7';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { hash } = await req.json();

    if (!hash) {
      throw new Error('Hash parameter is required');
    }

    // Initialize results
    let malwareBazaarResult = null;
    let hybridAnalysisResult = null;

    // Check MalwareBazaar
    try {
      const mbResponse = await fetch('https://mb-api.abuse.ch/api/v1/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'API-KEY': Deno.env.get('MALWAREBAZAAR_API_KEY') || ''
        },
        body: new URLSearchParams({
          query: 'get_info',
          hash: hash
        }).toString()
      });

      if (!mbResponse.ok) {
        throw new Error(`MalwareBazaar API error: ${mbResponse.status}`);
      }

      malwareBazaarResult = await mbResponse.json();
    } catch (error) {
      console.error('MalwareBazaar request failed:', error);
      malwareBazaarResult = { 
        query_status: 'error',
        error_message: error.message
      };
    }

    // Check Hybrid Analysis
    try {
      const haResponse = await fetch('https://www.hybrid-analysis.com/api/v2/search/hash', {
        method: 'POST',
        headers: {
          'api-key': Deno.env.get('HYBRID_ANALYSIS_API_KEY') || '',
          'Content-Type': 'application/json',
          'User-Agent': 'Hybrid-Analysis-JavaScript/1.0',
          'accept': 'application/json'
        },
        body: JSON.stringify({ hash })
      });

      if (!haResponse.ok) {
        throw new Error(`Hybrid Analysis API error: ${haResponse.status}`);
      }

      hybridAnalysisResult = await haResponse.json();
    } catch (error) {
      console.error('Hybrid Analysis request failed:', error);
      hybridAnalysisResult = {
        state: 'ERROR',
        error_message: error.message
      };
    }

    // Return combined results
    return new Response(
      JSON.stringify({
        malwareBazaar: malwareBazaarResult || { query_status: 'error', error_message: 'API request failed' },
        hybridAnalysis: hybridAnalysisResult || { state: 'ERROR', error_message: 'API request failed' }
      }),
      {
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );
  } catch (error) {
    console.error('Error in malware-check function:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        details: error.message 
      }),
      {
        status: 500,
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        }
      }
    );
  }
});